1
00:00:00,602 --> 00:00:08,164
[SOUND]
Hi,

2
00:00:08,164 --> 00:00:15,022
let's introduce the very
famous Apriori Algorithm.

3
00:00:15,022 --> 00:00:20,097
This algorithm is that the first candidate
generation and test approach for

4
00:00:20,097 --> 00:00:21,929
frequent pattern mining.

5
00:00:21,929 --> 00:00:22,543
Okay.

6
00:00:22,543 --> 00:00:26,989
It is a level-wise candidate
generation test approach.

7
00:00:26,989 --> 00:00:31,665
Initially, the first time you
just scan the database once to

8
00:00:31,665 --> 00:00:33,872
get frequent 1-itemset.

9
00:00:33,872 --> 00:00:38,471
Then taking this frequent
1-itemset your going to

10
00:00:38,471 --> 00:00:42,694
generate length-2 candidate itemsets.

11
00:00:42,694 --> 00:00:48,017
The case iteration, you are going to
take a length-k frequent itemsets

12
00:00:48,017 --> 00:00:51,780
to generate length-k
plus 1 candidate itemset.

13
00:00:51,780 --> 00:00:57,702
Then you go against the database to
test these candidates generated and

14
00:00:57,702 --> 00:01:01,659
to find the real frequent
k plus 1-itemsets.

15
00:01:01,659 --> 00:01:02,808
Okay.

16
00:01:02,808 --> 00:01:09,253
Every iteration you set k to k plus 1,
so you can go until no frequent

17
00:01:09,253 --> 00:01:15,940
itemsets can be generated or
no candidate itemsets can be generated.

18
00:01:15,940 --> 00:01:16,578
Okay.

19
00:01:16,578 --> 00:01:18,918
Then after you exit from loop,

20
00:01:18,918 --> 00:01:25,413
you just return all the frequent itemsets
that's derived, that's the algorithm.

21
00:01:25,413 --> 00:01:28,072
Let's look at the pseudocode.

22
00:01:28,072 --> 00:01:33,110
We set C sub k to be
the candidate itemset of size k.

23
00:01:33,110 --> 00:01:37,394
F sub k to be the frequent
itemset of size k.

24
00:01:37,394 --> 00:01:45,871
Initially, we just get a frequent
1-itemset, then we get into the loop.

25
00:01:45,871 --> 00:01:51,917
Suppose the frequent k item set
is not empty, then we get in.

26
00:01:51,917 --> 00:01:59,718
We use k's frequent item set to
generate k plus 1's candidate itemsets.

27
00:01:59,718 --> 00:02:05,789
Then we go against the database
using the menu support to see,

28
00:02:05,789 --> 00:02:10,714
which k plus 1 candidate
itemsets are frequent.

29
00:02:10,714 --> 00:02:11,329
Okay.

30
00:02:11,329 --> 00:02:15,356
We derive the frequent k plus 1-itemsets.

31
00:02:15,356 --> 00:02:16,309
Okay.

32
00:02:16,309 --> 00:02:21,715
Then we reset k to k plus 1
until we get out of this loop,

33
00:02:21,715 --> 00:02:28,430
we just return all the frequent k
itemsets for all the k's derived.

34
00:02:28,430 --> 00:02:29,335
Okay?

35
00:02:29,335 --> 00:02:31,971
Let's look at a concrete example, okay?

36
00:02:31,971 --> 00:02:36,230
You'll look at this transaction database,
it contains only four transactions.

37
00:02:36,230 --> 00:02:37,008
Okay.

38
00:02:37,008 --> 00:02:43,069
The first scan, you just try to find
their support for every single itemset.

39
00:02:43,069 --> 00:02:43,976
Okay.

40
00:02:43,976 --> 00:02:48,654
Then we find D, the support is only 1,
so it's not frequent.

41
00:02:48,654 --> 00:02:54,793
So then we just remove it, we get
a frequent 1-itemsets and their support.

42
00:02:54,793 --> 00:02:55,595
Okay.

43
00:02:55,595 --> 00:03:01,055
Then we use this to derive
the candidate 2-itemsets C sub 2,

44
00:03:01,055 --> 00:03:07,010
then we scan the Again,
we find the real support Then we find

45
00:03:07,010 --> 00:03:13,335
these two blue marker ones are infrequent,
we derive frequent 2-itemsets.

46
00:03:13,335 --> 00:03:19,790
Then using frequent 2-itemsets, we derive
the frequent three candidate itemsets.

47
00:03:19,790 --> 00:03:23,005
Remember, this why you
probably can't see a big cut.

48
00:03:23,005 --> 00:03:23,795
Why?

49
00:03:23,795 --> 00:03:27,789
Because you probably see A,
C, B, C are frequent.

50
00:03:27,789 --> 00:03:35,393
You may think A, B, C could be candidate
itemset, but A, B is not frequent here.

51
00:03:35,393 --> 00:03:38,109
So, A, B, C will not be derived.

52
00:03:38,109 --> 00:03:40,326
So we only derive B, C, E.

53
00:03:40,326 --> 00:03:41,127
Okay.

54
00:03:41,127 --> 00:03:46,294
With another scan, we find it support two,
so it's frequent as well.

55
00:03:46,294 --> 00:03:52,029
Then we find all the frequent,
one, two, three itemsets.

56
00:03:52,029 --> 00:03:58,264
The concrete implementation actually
involve self-joining and pruning.

57
00:03:58,264 --> 00:04:00,387
Self-joining goes like this.

58
00:04:00,387 --> 00:04:01,050
Okay.

59
00:04:01,050 --> 00:04:03,173
We've got abc, abd.

60
00:04:03,173 --> 00:04:06,482
The first two are the same,
the third one is different.

61
00:04:06,482 --> 00:04:11,172
So we generate this self-joined
generate this candidate set.

62
00:04:11,172 --> 00:04:11,927
Okay.

63
00:04:11,927 --> 00:04:17,048
The similar thing, we've got acd,
ace, the first two are just the same.

64
00:04:17,048 --> 00:04:19,391
The third one, we get them together.

65
00:04:19,391 --> 00:04:22,225
We get this candidate sets.

66
00:04:22,225 --> 00:04:26,243
But okay, we may need a pruning process.

67
00:04:26,243 --> 00:04:28,286
The pruning is pretty simple.

68
00:04:28,286 --> 00:04:33,892
Before you count against the database,
you proceed for abcd.

69
00:04:33,892 --> 00:04:39,650
This bcd is there, so
this is the candidate one.

70
00:04:39,650 --> 00:04:45,350
But for acde, cde it is not in
the frequent three itemset.

71
00:04:45,350 --> 00:04:50,286
So acd cannot be the candidate,
so it's pruned.

72
00:04:50,286 --> 00:04:53,749
So that's the simple
way of self-joining and

73
00:04:53,749 --> 00:04:56,391
the pruning, we can solve this problem.

74
00:04:56,391 --> 00:04:56,925
Okay.

75
00:04:56,925 --> 00:05:01,489
The final we get only one candidate sets,
abcd.

76
00:05:01,489 --> 00:05:08,163
Lets look at the SQL Implementation of
this candidate set generation and test.

77
00:05:08,163 --> 00:05:11,148
So we proceed the candidate
generation is essentially this.

78
00:05:11,148 --> 00:05:11,785
Okay.

79
00:05:11,785 --> 00:05:15,384
You perceive the self -joining,
how to do self-joining?

80
00:05:15,384 --> 00:05:20,900
You will see the first pay minus 2,
they are identical.

81
00:05:20,900 --> 00:05:24,423
Then the last one, k minus 1 item,

82
00:05:24,423 --> 00:05:30,186
1 is smaller than the other,
we get it one candidate set.

83
00:05:30,186 --> 00:05:33,740
Then for this candidate set,
we still need pruning.

84
00:05:33,740 --> 00:05:38,444
The pruning, essentially to
check whether these subsets,

85
00:05:38,444 --> 00:05:41,958
the k minus 1 subset, containing this one.

86
00:05:41,958 --> 00:05:47,068
If s is not on f k minus 1,
then we just delete this

87
00:05:47,068 --> 00:05:51,699
candidate from the candidate set, C sub k.

88
00:05:51,699 --> 00:05:59,525
So this is a candidate generation, the key
step of SQL Implementation of app array.

89
00:05:59,525 --> 00:06:09,525
[MUSIC]

